# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build Examples

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      tags:
        description: 'Manual trigger' 

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      shell: bash
    - name: Get Tag
      uses: olegtarasov/get-tag@v2
      id: tagName
      with:
          tagRegex: "foobar-(.*)"  # Optional. Returns specified group text as tag name. Full tag string is returned if regex is not defined.
          tagRegexGroup: 1 # Optional. Default is 1.
    - name: Set Tag # Output usage example
      run: |
          echo "${{ steps.tagName.outputs.tag }}"
          tag="${{ steps.tagName.outputs.tag }}"
          echo "GIT_TAG=$tag" >> $GITHUB_ENV
      shell: bash
    - name: Test tag
      run: |
        echo "${{ env.GIT_TAG }}"
      shell: bash
    - name: Test encoding
      run: |
        python -c "import sys; print(sys.getdefaultencoding())"
    - name: Testing examples
      run: |
        make examples
        pytest examples
      shell: bash
